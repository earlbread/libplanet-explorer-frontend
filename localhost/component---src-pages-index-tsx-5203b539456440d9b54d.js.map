{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/misc/useSearchParams.ts","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx"],"names":["BlockList","_ref3","blocks","columns","key","name","fieldName","iconName","isIconOnly","minWidth","maxWidth","isRowHeader","isResizable","isSorted","isSortedDescending","data","isPadded","onRender","block","react_default","a","createElement","Link","href","hash","DetailsList","items","selectionMode","SelectionMode","none","getKey","setKey","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","onItemInvoked","navigate","IndexPage","_ref","location","_useSearchParams","_useQueryString","useQueryString","queryString","setQueryString","querystring","parse","searchParams","stringify","useSearchParams","setSearchParams","_searchParams$offset","offset","setOffset","newSearchParams","Object","assign","olderHandler","newerHandler","Fragment","graphql","variables","limit","_ref2","loading","error","DefaultButton","onClick","disabled","className","css","_templateObject","pages_BlockList","_useState","useState","search","substr","useEffect","path","pathname","withPrefix","length","BlockCommonFragmentDoc","gql","BlockListDocument","_templateObject2","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","query","BlockByHashDocument","_templateObject3","BlockByHashComponent"],"mappings":"iYAiBA,IAyDMA,EAAsC,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OACvCC,EAAqB,CACzB,CACEC,IAAK,cACLC,KAAM,QACNC,UAAW,QACXC,SAAU,eACVC,YAAY,EACZC,SAAU,EACVC,SAAU,GACVC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,oBAAoB,EACpBC,KAAM,SACNC,UAAU,GAEZ,CACEZ,IAAK,aACLC,KAAM,OACNC,UAAW,OACXG,SAAU,IACVC,SAAU,IACVC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,oBAAoB,EACpBC,KAAM,SACNC,UAAU,EACVC,SAAU,SAAAC,GAAK,OACbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,KAAI,YAAcL,EAAMM,MAASN,EAAMM,QAGjD,CACEpB,IAAK,kBACLC,KAAM,YACNC,UAAW,YACXG,SAAU,IACVC,SAAU,IACVC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,oBAAoB,EACpBC,KAAM,SACNC,UAAU,IAGd,OACEG,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,MAAOxB,EACPC,QAASA,EACTwB,cAAeC,IAAcC,KAC7BC,OAAQ,SAAAZ,GAAK,OAAIA,EAAMM,MACvBO,OAAO,MACPC,WAAYC,IAAsBC,UAClCC,iBAAiB,EACjBC,cAAe,SAAAlB,GAAK,OAAImB,mBAAQ,WAAYnB,EAAMM,UAKzCc,UAtH6B,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,ECd/C,SAAyBD,GAAoB,IAAAE,EACpBC,YAAeH,GAA9CI,EADmDF,EAAA,GACtCG,EADsCH,EAAA,GAK1D,MAAO,CAHcI,IAAYC,MAAMH,GACf,SAACI,GAAD,OACtBH,EAAeC,IAAYG,UAAUD,MDYCE,CAAgBV,GAAjDQ,EAFqDP,EAAA,GAEvCU,EAFuCV,EAAA,GAAAW,EAGrCJ,EAAfK,cAHoD,IAAAD,EAG3C,EAH2CA,EAItDE,EAAY,SAACD,GACjB,GAAIA,EAAS,EAAG,CACd,IAAME,EAAeC,OAAAC,OAAA,GAAQT,UACtBO,EAAgBF,OACvBF,EAAgBI,QAEhBJ,EAAeK,OAAAC,OAAA,GAAMT,EAAN,CAAoBK,aAGjCK,EAAe,WACnBJ,GAAWD,EAbC,KAeRM,EAAe,WACnBL,GAAWD,EAhBC,KAmBd,OACElC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwC,SAAA,KACEzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAoBC,UAAW,CAAET,SAAQU,MArB/B,KAsBP,SAAAC,GAA8B,IAA3BjD,EAA2BiD,EAA3BjD,KAAMkD,EAAqBD,EAArBC,QACR,OAD6BD,EAAZE,MACC/C,EAAAC,EAAAC,cAAA,mBAEhBF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwC,SAAA,KACEzC,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CACEC,QAAST,EACTU,SAAUJ,GAAWZ,EAAS,EAC9BiB,UAAWC,YAAFC,MAHX,WAQArD,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAeE,SAAUJ,EAASG,QAASV,GAA3C,WAGCO,EACC9C,EAAAC,EAAAC,cAAA,qBAEAF,EAAAC,EAAAC,cAACoD,EAAD,CACEvE,OAAQ+D,EAAU,GAAMlD,EAAMb,2GExDjC,SAASyC,EAAeH,GAAoB,IAAAkC,EACnBC,mBAASnC,EAASoC,OAAOC,OAAO,IAA/DjC,EADkD8B,EAAA,GACrC7B,EADqC6B,EAAA,GAMzD,OAJAI,oBAAU,WACR,IAAMC,EAAOvC,EAASwC,SAASH,OAAOI,qBAAW,KAAKC,OAAS,GAC/D7C,mBAAS0C,GAAQnC,EAAW,IAAOA,EAAgB,MAClD,CAACA,IACG,CAACA,EAAaC,g3BCsFhB,IAAMsC,EAAyBC,IAAHZ,KAQtBa,EAAoBD,IAAHE,IAMxBH,GAGWI,EAAqB,SAACC,GAAD,OAChCC,EAAA,cAACC,EAAA,EAADlC,OAAAC,OAAA,CAAsEkC,MAAON,GAAuBG,KAenG,IAAMI,EAAsBR,IAAHS,IAiB1BV,GAGWW,EAAuB,SAACN,GAAD,OAClCC,EAAA,cAACC,EAAA,EAADlC,OAAAC,OAAA,CAA0EkC,MAAOC,GAAyBJ","file":"component---src-pages-index-tsx-5203b539456440d9b54d.js","sourcesContent":["import React from 'react';\nimport { css } from 'emotion';\nimport { navigate } from 'gatsby';\nimport { DefaultButton, Link } from 'office-ui-fabric-react';\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from 'office-ui-fabric-react/lib/DetailsList';\nimport { Block, BlockListComponent } from '../generated/graphql';\nimport useSearchParams from '../misc/useSearchParams';\n\ninterface IndexPageProps {\n  location: Location;\n}\n\nconst IndexPage: React.FC<IndexPageProps> = ({ location }) => {\n  const limit = 20;\n  const [searchParams, setSearchParams] = useSearchParams(location);\n  const { offset = 0 } = searchParams;\n  const setOffset = (offset: number) => {\n    if (offset < 1) {\n      const newSearchParams = { ...searchParams };\n      delete newSearchParams.offset;\n      setSearchParams(newSearchParams);\n    } else {\n      setSearchParams({ ...searchParams, offset });\n    }\n  };\n  const olderHandler = () => {\n    setOffset(+offset + limit);\n  };\n  const newerHandler = () => {\n    setOffset(+offset - limit);\n  };\n\n  return (\n    <>\n      <BlockListComponent variables={{ offset, limit }}>\n        {({ data, loading, error }) => {\n          if (error) return <p>error!</p>;\n          return (\n            <>\n              <DefaultButton\n                onClick={newerHandler}\n                disabled={loading || offset < 1}\n                className={css`\n                  margin-right: 5px;\n                `}>\n                &larr; Newer\n              </DefaultButton>\n              <DefaultButton disabled={loading} onClick={olderHandler}>\n                Older &rarr;\n              </DefaultButton>\n              {loading ? (\n                <p>Loading&hellip;</p>\n              ) : (\n                <BlockList\n                  blocks={loading ? [] : (data!.blocks as NonNullable<Block[]>)}\n                />\n              )}\n            </>\n          );\n        }}\n      </BlockListComponent>\n    </>\n  );\n};\n\ninterface BlockListProps {\n  blocks: Pick<Block, 'hash' | 'index'>[];\n}\n\nconst BlockList: React.FC<BlockListProps> = ({ blocks }) => {\n  const columns: IColumn[] = [\n    {\n      key: 'columnIndex',\n      name: 'Index',\n      fieldName: 'index',\n      iconName: 'NumberSymbol',\n      isIconOnly: true,\n      minWidth: 5,\n      maxWidth: 40,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n    },\n    {\n      key: 'columnHash',\n      name: 'Hash',\n      fieldName: 'hash',\n      minWidth: 350,\n      maxWidth: 450,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: false,\n      data: 'string',\n      isPadded: true,\n      onRender: block => (\n        <Link href={`./block/?${block.hash}`}>{block.hash}</Link>\n      ),\n    },\n    {\n      key: 'columnTimestamp',\n      name: 'Timestamp',\n      fieldName: 'timestamp',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n    },\n  ];\n  return (\n    <DetailsList\n      items={blocks}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      getKey={block => block.hash}\n      setKey=\"set\"\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      onItemInvoked={block => navigate(`/block/?${block.hash}`)}\n    />\n  );\n};\n\nexport default IndexPage;\n","import querystring from 'querystring';\nimport useQueryString from './useQueryString';\n\nexport default function useSearchParams(location: Location) {\n  const [queryString, setQueryString] = useQueryString(location);\n  const searchParams = querystring.parse(queryString);\n  const setSearchParams = (searchParams: any) =>\n    setQueryString(querystring.stringify(searchParams));\n  return [searchParams, setSearchParams] as const;\n}\n","import { useState, useEffect } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const [queryString, setQueryString] = useState(location.search.substr(1));\n  useEffect(() => {\n    const path = location.pathname.substr(withPrefix('/').length - 1);\n    navigate(path + (queryString ? `?${queryString}` : ''));\n  }, [queryString]);\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n  __typename?: 'Action',\n  plainValue?: Maybe<Array<Maybe<PlainValueKeyValuePairType>>>,\n};\n\nexport type Block = {\n  __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash?: Maybe<Scalars['ID']>,\n  index: Scalars['Int'],\n  miner?: Maybe<Scalars['String']>,\n  nonce?: Maybe<Scalars['String']>,\n  previousHash?: Maybe<Scalars['String']>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions?: Maybe<Array<Maybe<Transaction>>>,\n};\n\nexport type BlockQuery = {\n  __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks?: Maybe<Array<Maybe<Block>>>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\n\n\n\n\n\n\nexport type PlainValueKeyValuePairType = {\n  __typename?: 'PlainValueKeyValuePairType',\n  key?: Maybe<Scalars['String']>,\n  value?: Maybe<Scalars['String']>,\n};\n\n\nexport type Transaction = {\n  __typename?: 'Transaction',\n  actions?: Maybe<Array<Maybe<Action>>>,\n  nonce: Scalars['Int'],\n  publicKey?: Maybe<Scalars['String']>,\n  signature?: Maybe<Scalars['ID']>,\n  signer?: Maybe<Scalars['String']>,\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddress?: Maybe<Array<Maybe<Scalars['String']>>>,\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int']\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'BlockQuery' } & { blocks: Maybe<Array<Maybe<({ __typename?: 'Block' } & BlockCommonFragment)>>> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce' | 'previousHash'> & { transactions: Maybe<Array<Maybe<({ __typename?: 'Transaction' } & Pick<Transaction, 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddress'>)>>> } & BlockCommonFragment)> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!) {\n  blocks(desc: true, offset: $offset, limit: $limit) {\n    ...BlockCommon\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  block(hash: $hash) {\n    ...BlockCommon\n    miner\n    nonce\n    previousHash\n    transactions {\n      nonce\n      publicKey\n      signature\n      signer\n      timestamp\n      updatedAddress\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;"],"sourceRoot":""}