{"version":3,"sources":["webpack:///./src/pages/block.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_misc_useQueryString__WEBPACK_IMPORTED_MODULE_1__","_generated_graphql__WEBPACK_IMPORTED_MODULE_2__","BlockPage","_ref","location","_useQueryString","useQueryString","queryString","hash","a","createElement","variables","_ref2","data","loading","error","block","index","nonce","miner","timestamp","_useState","useState","search","substr","setQueryString","useEffect","path","pathname","withPrefix","length","navigate","BlockCommonFragmentDoc","gql","_templateObject","BlockListDocument","_templateObject2","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","Object","assign","query","BlockByHashDocument","_templateObject3","BlockByHashComponent"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAgDeQ,UAxC6B,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,EACtBC,YAAeF,GAA9CG,EADqDF,EAAA,GAEtDG,GAFsDH,EAAA,GAE/CE,GACb,OACET,EAAAW,EAAAC,cAACT,EAAA,EAAD,CAAsBU,UAAW,CAAEH,SAChC,SAAAI,GAA8B,IAA3BC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,QAASC,EAAYH,EAAZG,MACjB,GAAID,EAAS,OAAOhB,EAAAW,EAAAC,cAAA,qBACpB,GAAIK,EAAO,OAAOjB,EAAAW,EAAAC,cAAA,mBAFW,IAGrBM,EAAUH,EAAVG,MACR,OAAKA,EAOHlB,EAAAW,EAAAC,cAAA,UACEZ,EAAAW,EAAAC,cAAA,mBACAZ,EAAAW,EAAAC,cAAA,UAAKM,EAAMC,OACXnB,EAAAW,EAAAC,cAAA,kBACAZ,EAAAW,EAAAC,cAAA,UACEZ,EAAAW,EAAAC,cAAA,YAAOM,EAAMR,OAEfV,EAAAW,EAAAC,cAAA,mBACAZ,EAAAW,EAAAC,cAAA,UACEZ,EAAAW,EAAAC,cAAA,YAAOM,EAAME,QAEfpB,EAAAW,EAAAC,cAAA,mBACAZ,EAAAW,EAAAC,cAAA,UACEZ,EAAAW,EAAAC,cAAA,YAAOM,EAAMG,QAEfrB,EAAAW,EAAAC,cAAA,uBACAZ,EAAAW,EAAAC,cAAA,UAAKM,EAAMI,YArBXtB,EAAAW,EAAAC,cAAA,2BACiBZ,EAAAW,EAAAC,cAAA,YAAOF,oGCjBrB,SAASF,EAAeF,GAAoB,IAAAiB,EACnBC,mBAASlB,EAASmB,OAAOC,OAAO,IAA/DjB,EADkDc,EAAA,GACrCI,EADqCJ,EAAA,GAMzD,OAJAK,oBAAU,WACR,IAAMC,EAAOvB,EAASwB,SAASJ,OAAOK,qBAAW,KAAKC,OAAS,GAC/DC,mBAASJ,GAAQpB,EAAW,IAAOA,EAAgB,MAClD,CAACA,IACG,CAACA,EAAakB,g3BCsFhB,IAAMO,EAAyBC,IAAHC,KAQtBC,EAAoBF,IAAHG,IAMxBJ,GAGWK,EAAqB,SAACC,GAAD,OAChCC,EAAA,cAACC,EAAA,EAADC,OAAAC,OAAA,CAAsEC,MAAOR,GAAuBG,KAenG,IAAMM,EAAsBX,IAAHY,IAiB1Bb,GAGWc,EAAuB,SAACR,GAAD,OAClCC,EAAA,cAACC,EAAA,EAADC,OAAAC,OAAA,CAA0EC,MAAOC,GAAyBN","file":"component---src-pages-block-tsx-a0d2d1939a6e7ad7e840.js","sourcesContent":["import React from 'react';\nimport useQueryString from '../misc/useQueryString';\nimport { BlockByHashComponent } from '../generated/graphql';\n\ninterface BlockPageProps {\n  location: Location;\n}\n\nconst BlockPage: React.FC<BlockPageProps> = ({ location }) => {\n  const [queryString, setQueryString] = useQueryString(location);\n  const hash = queryString;\n  return (\n    <BlockByHashComponent variables={{ hash }}>\n      {({ data, loading, error }) => {\n        if (loading) return <p>loading&hellip;</p>;\n        if (error) return <p>error!</p>;\n        const { block } = data!;\n        if (!block)\n          return (\n            <p>\n              No such block: <code>{hash}</code>\n            </p>\n          );\n        return (\n          <dl>\n            <dt>Index</dt>\n            <dd>{block.index}</dd>\n            <dt>Hash</dt>\n            <dd>\n              <code>{block.hash}</code>\n            </dd>\n            <dt>Nonce</dt>\n            <dd>\n              <code>{block.nonce}</code>\n            </dd>\n            <dt>Miner</dt>\n            <dd>\n              <code>{block.miner}</code>\n            </dd>\n            <dt>Timestamp</dt>\n            <dd>{block.timestamp}</dd>\n          </dl>\n        );\n      }}\n    </BlockByHashComponent>\n  );\n};\n\nexport default BlockPage;\n","import { useState, useEffect } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const [queryString, setQueryString] = useState(location.search.substr(1));\n  useEffect(() => {\n    const path = location.pathname.substr(withPrefix('/').length - 1);\n    navigate(path + (queryString ? `?${queryString}` : ''));\n  }, [queryString]);\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n  __typename?: 'Action',\n  plainValue?: Maybe<Array<Maybe<PlainValueKeyValuePairType>>>,\n};\n\nexport type Block = {\n  __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash?: Maybe<Scalars['ID']>,\n  index: Scalars['Int'],\n  miner?: Maybe<Scalars['String']>,\n  nonce?: Maybe<Scalars['String']>,\n  previousHash?: Maybe<Scalars['String']>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions?: Maybe<Array<Maybe<Transaction>>>,\n};\n\nexport type BlockQuery = {\n  __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks?: Maybe<Array<Maybe<Block>>>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\n\n\n\n\n\n\nexport type PlainValueKeyValuePairType = {\n  __typename?: 'PlainValueKeyValuePairType',\n  key?: Maybe<Scalars['String']>,\n  value?: Maybe<Scalars['String']>,\n};\n\n\nexport type Transaction = {\n  __typename?: 'Transaction',\n  actions?: Maybe<Array<Maybe<Action>>>,\n  nonce: Scalars['Int'],\n  publicKey?: Maybe<Scalars['String']>,\n  signature?: Maybe<Scalars['ID']>,\n  signer?: Maybe<Scalars['String']>,\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddress?: Maybe<Array<Maybe<Scalars['String']>>>,\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int']\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'BlockQuery' } & { blocks: Maybe<Array<Maybe<({ __typename?: 'Block' } & BlockCommonFragment)>>> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce' | 'previousHash'> & { transactions: Maybe<Array<Maybe<({ __typename?: 'Transaction' } & Pick<Transaction, 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddress'>)>>> } & BlockCommonFragment)> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!) {\n  blocks(desc: true, offset: $offset, limit: $limit) {\n    ...BlockCommon\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  block(hash: $hash) {\n    ...BlockCommon\n    miner\n    nonce\n    previousHash\n    transactions {\n      nonce\n      publicKey\n      signature\n      signer\n      timestamp\n      updatedAddress\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;"],"sourceRoot":""}